/* Generated By:JJTree&JavaCC: Do not edit this line. BoolExprTree.java */
package org.ascape.query.parser;

import java.io.BufferedReader;
import java.io.StringReader;

public class BoolExprTree/*@bgen(jjtree)*/implements BoolExprTreeTreeConstants, BoolExprTreeConstants {/*@bgen(jjtree)*/
  protected JJTBoolExprTreeState jjtree = new JJTBoolExprTreeState();
 public static String[] argtests = {
                                    "(field=\"AND\" AND field2=value2 OR field3=val3)",
                                    "((field=value) & (field2=value2 | field3=val3))",
                                    "field=value AND field2=value2 OR field3=val3",
                                    "(field=value AND field2=value2) OR field3=val3"};

  public static void main(String args[]) throws ParseException {
          System.out.println(args[0]);
          QTInput in = parse(args[0]);
          in.dump("");
  }

  public static QTInput parse(String exp) throws ParseException {
          BoolExprTree parser = new BoolExprTree(new BufferedReader(new StringReader(exp)));
          parser.Input();
          return (QTInput) parser.jjtree.rootNode();
  }

  final public void Input() throws ParseException {
 /*@bgen(jjtree) Input */
  QTInput jjtn000 = new QTInput(this, JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2)) {
        BooleanPhrase();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
        case 18:
          BooleanOperand();
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(0);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BooleanPhrase() throws ParseException {
 /*@bgen(jjtree) BooleanPhrase */
  QTBooleanPhrase jjtn000 = new QTBooleanPhrase(this, JJTBOOLEANPHRASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      BooleanOperand();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        BooleanOperator();
        BooleanOperand();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void BooleanOperand() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      Criteria();
      break;
    case 18:
      SubExpression();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BooleanOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      BooleanAnd();
      break;
    case OR:
      BooleanOr();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void BooleanAnd() throws ParseException {
 /*@bgen(jjtree) BooleanAnd */
  QTBooleanAnd jjtn000 = new QTBooleanAnd(this, JJTBOOLEANAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(AND);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BooleanOr() throws ParseException {
 /*@bgen(jjtree) BooleanOr */
  QTBooleanOr jjtn000 = new QTBooleanOr(this, JJTBOOLEANOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OR);
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;

    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SubExpression() throws ParseException {
    jj_consume_token(18);
    BooleanPhrase();
    jj_consume_token(19);
  }

  final public void Criteria() throws ParseException {
 /*@bgen(jjtree) Criteria */
  QTCriteria jjtn000 = new QTCriteria(this, JJTCRITERIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Property();
      ComparisonOperator();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        NonQuotedString();
        break;
      case QUOTED_STRING:
        QuotedString();
        break;
      case NUMBER:
        NumberString();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Property() throws ParseException {
 /*@bgen(jjtree) Property */
  QTProperty jjtn000 = new QTProperty(this, JJTPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_2;
        }
        Field();
        jj_consume_token(PERIOD);
      }
      Field();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void WildCard() throws ParseException {
 /*@bgen(jjtree) WildCard */
  QTWildCard jjtn000 = new QTWildCard(this, JJTWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WILDCARD);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;

    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void Field() throws ParseException {
 /*@bgen(jjtree) Field */
 QTField jjtn000 = new QTField(this, JJTFIELD);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NAME);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void ComparisonOperator() throws ParseException {
 @SuppressWarnings("unused")
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      Equal();
      break;
    case NOT_EQUAL:
      NotEqual();
      break;
    case LESS_THAN:
      LessThan();
      break;
    case GREATER_THAN:
      GreaterThan();
      break;
    case STARTS_WITH:
      StartsWith();
      break;
    case CONTAINS:
      Contains();

      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Equal() throws ParseException {
 /*@bgen(jjtree) Equal */
 QTEqual jjtn000 = new QTEqual(this, JJTEQUAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);@SuppressWarnings("unused")
Token t;
    try {
      jj_consume_token(EQUAL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void NotEqual() throws ParseException {
 /*@bgen(jjtree) NotEqual */
 QTNotEqual jjtn000 = new QTNotEqual(this, JJTNOTEQUAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);@SuppressWarnings("unused")
Token t;
    try {
      jj_consume_token(NOT_EQUAL);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;

    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void LessThan() throws ParseException {
 /*@bgen(jjtree) LessThan */
 QTLessThan jjtn000 = new QTLessThan(this, JJTLESSTHAN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);@SuppressWarnings("unused")
Token t;
    try {
      jj_consume_token(LESS_THAN);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;

    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void GreaterThan() throws ParseException {
 /*@bgen(jjtree) GreaterThan */
 QTGreaterThan jjtn000 = new QTGreaterThan(this, JJTGREATERTHAN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);@SuppressWarnings("unused")
Token t;
    try {
      jj_consume_token(GREATER_THAN);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;

    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void StartsWith() throws ParseException {
 /*@bgen(jjtree) StartsWith */
 QTStartsWith jjtn000 = new QTStartsWith(this, JJTSTARTSWITH);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);@SuppressWarnings("unused")
Token t;
    try {
      jj_consume_token(STARTS_WITH);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;

    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void Contains() throws ParseException {
 /*@bgen(jjtree) Contains */
 QTContains jjtn000 = new QTContains(this, JJTCONTAINS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);@SuppressWarnings("unused")
Token t;
    try {
      jj_consume_token(CONTAINS);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;

    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void NonQuotedString() throws ParseException {
 /*@bgen(jjtree) NonQuotedString */
 QTNonQuotedString jjtn000 = new QTNonQuotedString(this, JJTNONQUOTEDSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NAME);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
jjtn000.setValue(t.image);
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void NumberString() throws ParseException {
 /*@bgen(jjtree) NumberString */
 QTNumberString jjtn000 = new QTNumberString(this, JJTNUMBERSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMBER);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
jjtn000.setValue(t.image);
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void QuotedString() throws ParseException {
 /*@bgen(jjtree) QuotedString */
 QTQuotedString jjtn000 = new QTQuotedString(this, JJTQUOTEDSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(QUOTED_STRING);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
jjtn000.setValue(t.image.substring(1, t.image.length() - 1));
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_3R_7() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(CONTAINS)) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(STARTS_WITH)) return true;
    return false;
  }

  final private boolean jj_3R_3() {
    if (jj_3R_5()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_4()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(GREATER_THAN)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_3R_10()) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(LESS_THAN)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_scan_token(18)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(NOT_EQUAL)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_22()) return true;
    return false;
  }

  public BoolExprTreeTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x50000,0xc0,0x50000,0xc0,0x30020,0x3f00,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public BoolExprTree(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BoolExprTreeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public BoolExprTree(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BoolExprTreeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public BoolExprTree(BoolExprTreeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(BoolExprTreeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends Error {

    /**
     * 
     */
    private static final long serialVersionUID = 1L; }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[20];
    for (int i = 0; i < 20; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
