/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. F:\p4\depot\Ascape\src\com\nutech\ascape\query\parser\BoolExprTree.jj */
/*@egen*/options {               
  STATIC=false;
  IGNORE_CASE=true;                     
}

PARSER_BEGIN(BoolExprTree)

package org.ascape.query.parser;

import java.io.*;

public class BoolExprTree/*@bgen(jjtree)*/implements BoolExprTreeTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTBoolExprTreeState jjtree = new JJTBoolExprTreeState();

/*@egen*/

 public static String[] argtests = {
                                    "(field=\"AND\" AND field2=value2 OR field3=val3)",
                                    "((field=value) & (field2=value2 | field3=val3))",
                                    "field=value AND field2=value2 OR field3=val3",
                                    "(field=value AND field2=value2) OR field3=val3"};

  public static void main(String args[]) throws ParseException {
          System.out.println(args[0]);
          QTInput in = parse(args[0]);
          in.dump("");
  }

  public static QTInput parse(String exp) throws ParseException {
          BoolExprTree parser = new BoolExprTree(new BufferedReader(new StringReader(exp)));
          parser.Input();
          return (QTInput) parser.jjtree.rootNode();
  }

}

PARSER_END(BoolExprTree)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}


TOKEN :
{
  <QUOTED_STRING: "\"" (~["\""])+ "\"" >
| <AND: "AND" | "&" >
| <OR: "OR" | "|" >
| <EQUAL: "equals" | "=" >
| <NOT_EQUAL: "!=" >
| <LESS_THAN: "<" >
| <GREATER_THAN: ">">
| <STARTS_WITH: "startsWith" | ".<" >
| <CONTAINS: "contains" | "<.>" >
| <WILDCARD: "*" >
| <PERIOD: "." >
| <NAME: ( ["a"-"z","A"-"Z","_","0"-"9"] )+ >
| <NUMBER: ( [".","0"-"9"] )+ >
}

void Input() :
{/*@bgen(jjtree) Input */
  QTInput jjtn000 = new QTInput(this, JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Input */
  try {
/*@egen*/
  ( LOOKAHEAD(2) BooleanPhrase() | BooleanOperand() ) <EOF>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BooleanPhrase() :
{/*@bgen(jjtree) BooleanPhrase */
  QTBooleanPhrase jjtn000 = new QTBooleanPhrase(this, JJTBOOLEANPHRASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BooleanPhrase */
    try {
/*@egen*/
    BooleanOperand() ( BooleanOperator() BooleanOperand() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BooleanOperand()       :
{}
{
  Criteria() | SubExpression()
}

void BooleanOperator()       :
{}
{
  ( BooleanAnd() | BooleanOr() ) {
}
}

void BooleanAnd() :
{/*@bgen(jjtree) BooleanAnd */
  QTBooleanAnd jjtn000 = new QTBooleanAnd(this, JJTBOOLEANAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BooleanAnd */
  try {
/*@egen*/
  <AND>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ {
}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BooleanOr() :
{/*@bgen(jjtree) BooleanOr */
  QTBooleanOr jjtn000 = new QTBooleanOr(this, JJTBOOLEANOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BooleanOr */
  try {
/*@egen*/
  <OR>/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/ {
}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SubExpression()       :
{}
{
  "(" BooleanPhrase() ")"
}

void Criteria() :
{/*@bgen(jjtree) Criteria */
  QTCriteria jjtn000 = new QTCriteria(this, JJTCRITERIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Criteria */
  try {
/*@egen*/
  Property() ComparisonOperator() ( NonQuotedString() | QuotedString() | NumberString() )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Property() :
{/*@bgen(jjtree) Property */
  QTProperty jjtn000 = new QTProperty(this, JJTPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Property */
   try {
/*@egen*/
   ( LOOKAHEAD(2) Field() <PERIOD>  )* Field()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void WildCard() :
{/*@bgen(jjtree) WildCard */
  QTWildCard jjtn000 = new QTWildCard(this, JJTWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WildCard */
try {
/*@egen*/
<WILDCARD>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Field() :
{/*@bgen(jjtree) Field */
 QTField jjtn000 = new QTField(this, JJTFIELD);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Field */
try {
/*@egen*/
t = <NAME>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {
jjtn000.setName(t.image);
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ComparisonOperator()       :
{Token t;}
{
Equal() | NotEqual() | LessThan() | GreaterThan() | StartsWith() | Contains() {
}
}

void Equal() :
{/*@bgen(jjtree) Equal */
 QTEqual jjtn000 = new QTEqual(this, JJTEQUAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Equal */
try {
/*@egen*/
<EQUAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ {
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void NotEqual() :
{/*@bgen(jjtree) NotEqual */
 QTNotEqual jjtn000 = new QTNotEqual(this, JJTNOTEQUAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NotEqual */
try {
/*@egen*/
<NOT_EQUAL>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void LessThan() :
{/*@bgen(jjtree) LessThan */
 QTLessThan jjtn000 = new QTLessThan(this, JJTLESSTHAN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) LessThan */
try {
/*@egen*/
<LESS_THAN>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void GreaterThan() :
{/*@bgen(jjtree) GreaterThan */
 QTGreaterThan jjtn000 = new QTGreaterThan(this, JJTGREATERTHAN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) GreaterThan */
try {
/*@egen*/
<GREATER_THAN>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void StartsWith() :
{/*@bgen(jjtree) StartsWith */
 QTStartsWith jjtn000 = new QTStartsWith(this, JJTSTARTSWITH);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) StartsWith */
try {
/*@egen*/
<STARTS_WITH>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Contains() :
{/*@bgen(jjtree) Contains */
 QTContains jjtn000 = new QTContains(this, JJTCONTAINS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Contains */
try {
/*@egen*/
<CONTAINS>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void NonQuotedString() :
{/*@bgen(jjtree) NonQuotedString */
 QTNonQuotedString jjtn000 = new QTNonQuotedString(this, JJTNONQUOTEDSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NonQuotedString */
try {
/*@egen*/
t = <NAME>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {
jjtn000.setValue(t.image);
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void NumberString() :
{/*@bgen(jjtree) NumberString */
 QTNumberString jjtn000 = new QTNumberString(this, JJTNUMBERSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NumberString */
try {
/*@egen*/
t = <NUMBER>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
jjtn000.setValue(t.image);
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void QuotedString() :
{/*@bgen(jjtree) QuotedString */
 QTQuotedString jjtn000 = new QTQuotedString(this, JJTQUOTEDSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) QuotedString */
try {
/*@egen*/
t = <QUOTED_STRING>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {
jjtn000.setValue(t.image.substring(1, t.image.length() - 1));
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}


